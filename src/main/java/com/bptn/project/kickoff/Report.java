package com.bptn.project.kickoff;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class Report {
	private BufferedWriter writer;
	private Team homeTeam;

	//sets an instance of the team based on parameter
	public Report(Team team) {
		this.homeTeam = team;
	}

	//method that calls the two report generation
	public void generateReports() {
		generateTeamReport();
		generateMatchReport();
	}
	
	//using a bufferedwriter with a filewriter to write into a new text file. 
	public void generateTeamReport() {
		try { 
			writer = new BufferedWriter(new FileWriter("MyTeam.txt"));
			writer.write("🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰");
			writer.write("\n");
			writer.write("       			👑 "  + homeTeam.getTeamName() + "'s TEAM REPORT           ");
			writer.write("\n");
			writer.write("🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰");
			writer.write("\n");
			writer.write("	⚜️Team Name: " + homeTeam.getTeamName());
			writer.write("\n");
			writer.write("	🎲Total Matches Created: " + homeTeam.getTotalMatches());
			writer.write("\n");
			writer.write("	🎟️Total Matches Played: " + homeTeam.getMatches().values().stream().filter(match -> match.isMatchPlayed() == true).count());
			writer.write("\n");
			writer.write("	⚽Total Goals: " + homeTeam.getTotalGoals());
			writer.write("\n");
			writer.write("➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖");
			writer.write("\n");
			writer.write("➖➖➖➖➖           📊PLAYER STATISTIC            ➖➖➖➖➖");

			for(Map.Entry<Integer, Player> player : homeTeam.getRoster().entrySet()) { 
				writer.write("\n");
				writer.write("📛Player Name: " + player.getValue().getName());
				writer.write("\n");
				writer.write("	#️⃣Player Number: " + player.getValue().getNumber());
				writer.write("\n");
				writer.write("	🧳Player Position: " + player.getValue().getPosition());
				writer.write("\n");
				writer.write("	⚽Player Goals: " + player.getValue().getGoalScored());
				writer.write("\n");
				writer.write("	🟨Player YellowCards: " + player.getValue().getYellowCard());
				writer.write("\n");
				writer.write("	🟥Player RedCards: " + player.getValue().getRedCard());
				writer.write("\n");
				writer.write("➖➖➖➖➖➖                                         ➖➖➖➖➖");
				writer.write("\n");
			}
			writer.write("\n");
			writer.write("➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖");
			writer.write("\n");
			writer.write("➖➖➖➖➖                  🏁END                   ➖➖➖➖➖");
			writer.write("\n");
			writer.write("➖➖➖➖➖          🚀generated by KickOff™️        ➖➖➖➖➖");
			writer.write("\n");
			writer.write("🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰");
			writer.close();
			System.out.println(Color.BLACK_BOLD + Color.GREEN_BACKGROUND + "✅Team report generated: MyTeam.txt" + Color.RESET);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(Color.BLACK_BACKGROUND + Color.RED_BOLD_BRIGHT + "❌Failed to generate the team report." + Color.RESET);
			//e.printStackTrace();
		}
		
	}
	//generate a report specific for the team's match data
	public void generateMatchReport() {
		try {
			writer = new BufferedWriter(new FileWriter("MyMatches.txt"));
			writer.write("🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰");
			writer.write("\n");
			writer.write("            		🎲 " + homeTeam.getTeamName() + "'s MATCHES                  ");
			writer.write("\n");
			writer.write("🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰");
			writer.write("\n");
			writer.write("➖➖➖➖➖            💯COMPLETED MATCHES           ➖➖➖➖➖");
			writer.write("\n");
			
			List<Match> playedMatches = homeTeam.getMatches().values().stream().filter(match -> match.isMatchPlayed() == true).toList();
			for (Match match : playedMatches) {
				writer.write("	📣Title: " + match.getTitle());
				writer.write("\n");
				writer.write("	🏆Results: " + match.getAwayTeamName() + " [ " + match.getAwayTeamScore() + " : " + match.getHomeTeamScore() + " ] " + match.getHomeTeamName());
				writer.write("\n");
				writer.write("➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖") ;
				writer.write("\n");
			}
			writer.write("➖➖➖➖➖              🔜UPCOMING MATCHES              ➖➖➖➖➖");
			writer.write("\n");
			
			List<Match> unplayedMatches = homeTeam.getMatches().values().stream().filter(match -> match.isMatchPlayed() == false).toList();
			for (Match match : unplayedMatches) {
				writer.write("	📢Title: " + match.getTitle());
				writer.write("\n");
				writer.write("	🗒️Description: " + match.getDescription());
				writer.write("\n");
				writer.write("	📅Date: " + match.getDate());
				writer.write("\n");
				writer.write("	📍Location: " + match.getLocation());
				writer.write("\n");
				writer.write("➖➖➖➖➖                                             ➖➖➖➖➖");
				writer.write("\n");
			}
			writer.write("\n");
			writer.write("➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖");
			writer.write("\n");
			writer.write("➖➖➖➖➖                   🏁END                  ➖➖➖➖➖");
			writer.write("\n");
			writer.write("➖➖➖➖➖          generated by 🚀KickOff™️        ➖➖➖➖➖");
			writer.write("\n");
			writer.write("🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰🟰");
			writer.close();
			System.out.println(Color.BLACK_BOLD + Color.GREEN_BACKGROUND + "✅Match report generated: MyMatches.txt" + Color.RESET);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(Color.BLACK_BACKGROUND + Color.RED_BOLD_BRIGHT + "❌Failed to generate the match report." + Color.RESET);
			//e.printStackTrace();
		}
		
	}


}
